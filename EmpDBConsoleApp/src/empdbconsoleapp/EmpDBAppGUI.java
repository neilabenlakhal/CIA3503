/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package empdbconsoleapp;
import java.sql.*;
import java.util.List;
import java.util.Vector;
import javax.swing.JTable;
/**
 *
 * @author nlakhal
 */
public class EmpDBAppGUI extends javax.swing.JFrame {

    /**
     * Creates new form EmpDBAppGUI
     */
    public EmpDBAppGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextEmpID = new javax.swing.JTextField();
        jTextName = new javax.swing.JTextField();
        jTextDepartment = new javax.swing.JTextField();
        jTextBasicSalary = new javax.swing.JTextField();
        jButtonFindByID = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jLabelInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmpData = new javax.swing.JTable();
        jButtonShow = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Emp DB GUI App");
        setPreferredSize(new java.awt.Dimension(500, 600));
        getContentPane().setLayout(null);

        jLabel2.setText("Emp ID");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 40, 50, 17);

        jLabel3.setText("Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 90, 32, 17);

        jLabel4.setText("Dept");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 130, 50, 17);

        jLabel5.setText("Basic Salary");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 190, 80, 17);

        jTextEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEmpIDActionPerformed(evt);
            }
        });
        getContentPane().add(jTextEmpID);
        jTextEmpID.setBounds(130, 40, 64, 23);
        getContentPane().add(jTextName);
        jTextName.setBounds(130, 80, 64, 23);
        getContentPane().add(jTextDepartment);
        jTextDepartment.setBounds(130, 130, 60, 23);
        getContentPane().add(jTextBasicSalary);
        jTextBasicSalary.setBounds(130, 180, 64, 23);

        jButtonFindByID.setText("Find  by ID");
        jButtonFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindByIDActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonFindByID);
        jButtonFindByID.setBounds(250, 40, 120, 23);

        jButtonAdd.setText("Add new");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonAdd);
        jButtonAdd.setBounds(250, 90, 120, 23);

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonUpdate);
        jButtonUpdate.setBounds(250, 140, 110, 23);

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDelete);
        jButtonDelete.setBounds(250, 180, 110, 23);

        jLabelInfo.setText("Label status");
        getContentPane().add(jLabelInfo);
        jLabelInfo.setBounds(10, 480, 120, 20);

        jTableEmpData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableEmpData);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(120, 280, 360, 210);

        jButtonShow.setText("Show All");
        jButtonShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonShow);
        jButtonShow.setBounds(260, 220, 100, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEmpIDActionPerformed

    private void jButtonFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindByIDActionPerformed
        // TODO add your handling code here:
        //get entered value from ID text field using its getText() method
        String empId = jTextEmpID.getText().trim();
        
            //check if empId is empty
        if (empId.isEmpty()) {
            //show a message in the label info
            jLabelInfo.setText("Enter an employee ID!");
            return;
        }

             //call the EmployeeDAO.findEmployeeById() to find the employee record
        EmployeeDAO employeeDAO = new EmployeeDAO();
        Employee employee = null;
        try {
            employee = employeeDAO.findEmployeeById(empId);
            //if employee object return is null - empId does not exist 
            if (employee == null) {
                jLabelInfo.setText(empId + " not found!");
                return;
            }
            
            //display the employee data from the employee object in textfields
            jTextName.setText(employee.getEmpName());
            jTextDepartment.setText(employee.getEmpDept());
            jTextBasicSalary.setText(employee.getBasicSalary() + "");
        }catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:"+sqlex.getMessage());
        }

        
        
        
    }//GEN-LAST:event_jButtonFindByIDActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        String empId = jTextEmpID.getText().trim();
        String empName = jTextName.getText().trim();
        String empDept = jTextDepartment.getText().trim();
        String empBasicSalary = jTextBasicSalary.getText().trim();
        
        //check if any of the fields are empty 
        if (empId.isEmpty() || empName.isEmpty() || empDept.isEmpty() 
                                                || empBasicSalary.isEmpty()) {
            jLabelInfo.setText("Enter all data!");
            return;
        }
        
        double basicSalary = 0;
        try {
            basicSalary = Double.parseDouble(empBasicSalary);
        } catch(NumberFormatException nfex) {
            jLabelInfo.setText("Error:Basic Salary not a number!");
            return;
        }
        
        //check basic salary range
        if(basicSalary <= 2500 || basicSalary >= 25000) {
            jLabelInfo.setText("Error:Basic Salary out of range!");
            return;
        }
        
        //Use the DAO to add the new Employee to the database
        EmployeeDAO employeeDAO = new EmployeeDAO();
        int insertStatus = -1;
        try {
            //check if an employee with the same ID exists
            if (employeeDAO.findEmployeeById(empId) != null) {
                jLabelInfo.setText("EmpID "+empId+ " already exists!");
                return;
            }
            
            //add the new employee 
            insertStatus = employeeDAO.addNewEmployee(empId, empName, empDept, basicSalary);
        } catch (SQLException sqlex) {
            jLabelInfo.setText(sqlex.getMessage());
        }
        
        if (insertStatus == 1) {
            jLabelInfo.setText("Record for "+empName+ " added!");
        }
        else {
            jLabelInfo.setText("Error adding record for "+empName);
        }
    
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        //read from the text fields
        String empId = jTextEmpID.getText().trim();
        String empName = jTextName.getText().trim();
        String empDept = jTextDepartment.getText().trim();
        String empBasicSalary = jTextBasicSalary.getText().trim();
        
        //check if any of the fields are empty 
        if (empId.isEmpty() || empName.isEmpty() 
             || empDept.isEmpty() || empBasicSalary.isEmpty()) {
            jLabelInfo.setText("Enter all data!");
            return;
        }
        
        double basicSalary = 0;
        try {
            basicSalary = Double.parseDouble(empBasicSalary);
        } catch(NumberFormatException nfex) {
            jLabelInfo.setText("Error:Basic Salary not a number!");
            return;
        }
        
        //some sanity checking for basic salary range
        if(basicSalary <= 2500 || basicSalary >= 25000) {
            jLabelInfo.setText("Error:Basic Salary out of range!");
            return;
        }
        
        //Use the DAO to update the Employee if the entered employee ID exists
        EmployeeDAO employeeDAO = new EmployeeDAO();
        int updateStatus = -1;
        try {
            //check if the employee ID DOES NOT exist
            if (employeeDAO.findEmployeeById(empId) == null) {
                jLabelInfo.setText("EmpID "+empId+ " NOT FOUND!!");
                return;
            }
            

            //update the employee data 
            updateStatus = employeeDAO.updateEmployee(empId, empName, empDept, basicSalary);
        } catch (SQLException sqlex) {
            jLabelInfo.setText(sqlex.getMessage());
        }
        
        if (updateStatus == 1) {
            jLabelInfo.setText("Record for "+empId+ " updated!");
        }
        else {
            jLabelInfo.setText("Update record for "+empId);
        }

    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        
        //get entered value from ID text field using its getText() method
        String empId = jTextEmpID.getText().trim();
        
        //check if empId is empty
        if (empId.isEmpty()) {
            //show a message in the 
            jLabelInfo.setText("Enter an employee ID!");
            return;
        }
       
        EmployeeDAO employeeDAO = new EmployeeDAO();
        int deleteStatus = 0;
        try {
            //if employee object returned is null - empId does not exist 
            if (employeeDAO.findEmployeeById(empId) == null) {
                jLabelInfo.setText(empId + " not found!");
                return;
            }
            
            //Employee record with emptyId exists - delete the employee record 
            deleteStatus = employeeDAO.deleteEmployee(empId);
            
            if (deleteStatus == 1) {
                jLabelInfo.setText(empId + " record deleted!");
            }
            else {
                jLabelInfo.setText("Error deleting "+empId + " record!");
            }
            
         }catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:"+sqlex.getMessage());
        }

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowActionPerformed
        // TODO add your handling code here:
        
                //get all the employee data from the EmployeeDAO 
        //and Display it in a JTable
        
        EmployeeDAO employeeDAO = new EmployeeDAO();
        List<Employee> employeeList = null;
        try {
            employeeList = employeeDAO.getAllEmployees();
        }catch (SQLException sqlex) {
            jLabelInfo.setText("Database error!" +sqlex.getMessage());
        }
        
        //convert the employeeList and data in it to a vector of vectors
        Vector rowDataVector = new Vector();
        Vector columnDataVector = null;
        for(Employee employee : employeeList) {
            columnDataVector = new Vector();
            columnDataVector.add(employee.getEmpId());
            columnDataVector.add(employee.getEmpName());
            columnDataVector.add(employee.getEmpDept());
            columnDataVector.add(employee.getBasicSalary());
            
            //add this column data vector to the rowDataVector
            rowDataVector.add(columnDataVector);
        }
        
        //create a vector for column names
        Vector columnNamesVector = new Vector();
        columnNamesVector.add("EMPID");  columnNamesVector.add("NAME");
        columnNamesVector.add("DEPARTMENT"); columnNamesVector.add("BASIC SALARY");
        
        //init the JTable instance using the row data and column data vectors
        jTableEmpData = new JTable(rowDataVector, columnNamesVector);
        jScrollPane1.setViewportView(jTableEmpData);

    }//GEN-LAST:event_jButtonShowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpDBAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpDBAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpDBAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpDBAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpDBAppGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFindByID;
    private javax.swing.JButton jButtonShow;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTableEmpData;
    private javax.swing.JTextField jTextBasicSalary;
    private javax.swing.JTextField jTextDepartment;
    private javax.swing.JTextField jTextEmpID;
    private javax.swing.JTextField jTextName;
    // End of variables declaration//GEN-END:variables
}
